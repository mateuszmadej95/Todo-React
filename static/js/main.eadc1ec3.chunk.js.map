{"version":3,"sources":["Components/Todoinput.js","Components/Todoitem.js","Components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Todoinput","this","props","title","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","Todoitem","handleDelete","handleEdit","onClick","Todolist","items","clearList","map","item","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","alert","filtered","filter","currentItem","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eadc1ec3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Todoinput extends Component {\r\n  render() {\r\n    const { title, handleChange, handleSubmit, editItem } = this.props;\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n              <div className=\"input-group-text bg-default text-white\">\r\n                <i className=\"fas fa-book\"></i>\r\n              </div>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control text-capitalize\"\r\n              placeholder=\"Add any item...\"\r\n              value={title}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            className={\r\n              editItem\r\n                ? \"btn btn-block btn-secondary mt-3\"\r\n                : \"btn btn-block btn-default mt-3\"\r\n            }\r\n          >\r\n            {editItem ? \"Edit Item\" : \"Add Item\"}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Todoitem extends Component {\r\n  render() {\r\n    const { title, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n        <h6>{title}</h6>\r\n        <div className=\"todo-icon\">\r\n          <span className=\"mx-2 text-success\">\r\n            <i className=\"fas fa-pen\" title=\"Edit\" onClick={handleEdit}></i>\r\n          </span>\r\n          <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n            <i className=\"fas fa-trash\" title=\"Delete\"></i>\r\n          </span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Todoitem from \"./Todoitem\";\r\n\r\nexport default class Todolist extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <ul className=\"list-group my-5\">\r\n        <h3 className=\"text-capitalize text-center\">Todo List</h3>\r\n        {items.map(item => {\r\n          return (\r\n            <Todoitem\r\n              key={item.id}\r\n              title={item.title}\r\n              handleDelete={() => handleDelete(item.id)}\r\n              handleEdit={() => handleEdit(item.id)}\r\n            />\r\n          );\r\n        })}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger btn-block text-capitalize mt-5\"\r\n          onClick={clearList}\r\n        >\r\n          Clear List\r\n        </button>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Todoinput from \"./Components/Todoinput\";\nimport Todolist from \"./Components/Todolist\";\n\nimport { v4 as uuid } from \"uuid\";\n\nclass App extends Component {\n  state = {\n    items: [],\n    id: uuid(),\n    title: \"\",\n    editItem: false\n  };\n\n  handleChange = e => {\n    this.setState({\n      title: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (!this.state.title) {\n      alert(\"Enter a Correct Value\");\n    } else {\n      const newItem = {\n        id: this.state.id,\n        title: this.state.title\n      };\n      const updatedItems = [...this.state.items, newItem];\n\n      this.setState({\n        items: updatedItems,\n        title: \"\",\n        id: uuid(),\n        editItem: false\n      });\n    }\n  };\n\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n  };\n\n  handleDelete = id => {\n    const filtered = this.state.items.filter(item => item.id !== id);\n    this.setState({\n      items: filtered\n    });\n  };\n\n  handleEdit = id => {\n    if (!this.state.editItem) {\n      const filtered = this.state.items.filter(item => item.id !== id);\n      const currentItem = this.state.items.find(item => item.id === id);\n      this.setState({\n        items: filtered,\n        title: currentItem.title,\n        editItem: true,\n        id: id\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">todo input</h3>\n            <Todoinput\n              title={this.state.title}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem}\n            />\n            <Todolist\n              items={this.state.items}\n              clearList={this.clearList}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}